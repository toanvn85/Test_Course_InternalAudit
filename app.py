import os
import streamlit as st
import json
from datetime import datetime
import report
# Th·ª≠ t·∫£i t·ª´ dotenv n·∫øu c√≥
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # N·∫øu kh√¥ng c√≥ dotenv, b·ªè qua

# Import t·ª´ c√°c module kh√°c
from question_manager import manage_questions
from surveyhandler import survey_form
from stats_dashboard import stats_dashboard
from admin_dashboard import admin_dashboard
from database_helper import (
    get_supabase_client, 
    check_supabase_config, 
    get_user, 
    register_user, 
    check_email_exists
)
from PIL import Image, UnidentifiedImageError

           
# ------------ C·∫•u h√¨nh logo 2√ó3 cm ~ 76√ó113 px ------------
LOGO_WIDTH, LOGO_HEIGHT = 150, 150
SUPPORTED_FORMATS = ("png", "jpg", "jpeg", "gif")

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a logo
LOGO_DIR = "assets/logos"  # Th∆∞ m·ª•c ch·ª©a logo

# T·∫°o th∆∞ m·ª•c logo n·∫øu ch∆∞a t·ªìn t·∫°i
def ensure_logo_directory():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c logo t·ªìn t·∫°i"""
    if not os.path.exists(LOGO_DIR):
        try:
            os.makedirs(LOGO_DIR, exist_ok=True)
            print(f"ƒê√£ t·∫°o th∆∞ m·ª•c {LOGO_DIR}")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c logo: {e}")
            print(f"L·ªói: {e}")

# L∆∞u logo ƒë∆∞·ª£c t·∫£i l√™n
def save_uploaded_logo(logo_file, index):
    """L∆∞u logo ƒë√£ t·∫£i l√™n v√†o th∆∞ m·ª•c"""
    ensure_logo_directory()
    try:
        file_extension = logo_file.name.split('.')[-1].lower()
        if file_extension not in SUPPORTED_FORMATS:
            return False, f"ƒê·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {file_extension}"
        
        file_path = os.path.join(LOGO_DIR, f"logo{index}.{file_extension}")
        with open(file_path, "wb") as f:
            f.write(logo_file.getbuffer())
        return True, file_path
    except Exception as e:
        return False, str(e)

# T√¨m t·∫•t c·∫£ logo ƒë√£ l∆∞u
def find_saved_logos():
    """T√¨m c√°c logo ƒë√£ l∆∞u trong th∆∞ m·ª•c"""
    ensure_logo_directory()
    logo_paths = []
    
    # T√¨m ki·∫øm file logo1.*, logo2.*, logo3.*
    for i in range(1, 4):
        for ext in SUPPORTED_FORMATS:
            pattern = f"logo{i}.{ext}"
            path = os.path.join(LOGO_DIR, pattern)
            if os.path.exists(path):
                logo_paths.append(path)
                break
    
    return logo_paths

def display_logos():
    """Cho ph√©p t·∫£i l√™n 03 logo v√† hi·ªÉn th·ªã ch√∫ng c·ªë ƒë·ªãnh tr√™n giao di·ªán."""
    # T·∫°o container cho logo ·ªü ƒë·∫ßu trang
    logo_container = st.container()
    with logo_container:
        col1, col2, col3 = st.columns(3)
        
        # T√¨m ki·∫øm logo ƒë√£ l∆∞u
        saved_logos = find_saved_logos()
        
        # Hi·ªÉn th·ªã c√°c logo ƒë√£ l∆∞u
        for i, logo_path in enumerate(saved_logos):
            try:
                if i == 0:
                    with col1:
                        st.image(logo_path, width=LOGO_WIDTH)
                elif i == 1:
                    with col2:
                        st.image(logo_path, width=LOGO_WIDTH)
                elif i == 2:
                    with col3:
                        st.image(logo_path, width=LOGO_WIDTH)
            except Exception as e:
                st.error(f"L·ªói khi hi·ªÉn th·ªã logo {logo_path}: {e}")
        
        # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ·ª©ng d·ª•ng ·ªü gi·ªØa
        st.title("TUV NORD ISO 50001:2018 INTERNAL AUDIT TRAINING COURSE - APP")
    
    # Ph·∫ßn t·∫£i l√™n logo m·ªõi - ·∫©n trong expander ƒë·ªÉ kh√¥ng chi·∫øm nhi·ªÅu kh√¥ng gian
    with st.expander("C·∫•u h√¨nh logo"):
        st.write("T·∫£i l√™n 03 logo ƒë·ªÉ hi·ªÉn th·ªã tr√™n ·ª©ng d·ª•ng. Logo s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i cho c√°c l·∫ßn s·ª≠ d·ª•ng sau.")
        
        col1, col2, col3 = st.columns(3)
        
        # T·∫°o file uploader cho 3 logo
        with col1:
            logo1 = st.file_uploader("Logo 1", type=SUPPORTED_FORMATS, key="file1")
            if logo1:
                success, msg = save_uploaded_logo(logo1, 1)
                if success:
                    st.success("ƒê√£ l∆∞u Logo 1")
                else:
                    st.error(f"L·ªói khi l∆∞u Logo 1: {msg}")
        
        with col2:
            logo2 = st.file_uploader("Logo 2", type=SUPPORTED_FORMATS, key="file2")
            if logo2:
                success, msg = save_uploaded_logo(logo2, 2)
                if success:
                    st.success("ƒê√£ l∆∞u Logo 2")
                else:
                    st.error(f"L·ªói khi l∆∞u Logo 2: {msg}")
        
        with col3:
            logo3 = st.file_uploader("Logo 3", type=SUPPORTED_FORMATS, key="file3")
            if logo3:
                success, msg = save_uploaded_logo(logo3, 3)
                if success:
                    st.success("ƒê√£ l∆∞u Logo 3")
                else:
                    st.error(f"L·ªói khi l∆∞u Logo 3: {msg}")
        
        # N·∫øu c√≥ logo m·ªõi ƒë∆∞·ª£c t·∫£i l√™n, t·∫£i l·∫°i trang ƒë·ªÉ hi·ªÉn th·ªã
        if logo1 or logo2 or logo3:
            if st.button("C·∫≠p nh·∫≠t hi·ªÉn th·ªã logo"):
                st.rerun()

def login_register_form():
    """Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p v√† ƒëƒÉng k√Ω"""
    # Ki·ªÉm tra xem ƒë√£ ch·ªçn tab n√†o
    if "auth_tab" not in st.session_state:
        st.session_state.auth_tab = "login"
    
    # Tabs cho ƒëƒÉng nh·∫≠p v√† ƒëƒÉng k√Ω
    tab1, tab2 = st.tabs(["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω"])
    
    # Tab ƒëƒÉng nh·∫≠p
    with tab1:
        with st.form("login_form"):
            st.subheader("ƒêƒÉng nh·∫≠p")
            email = st.text_input("Email", placeholder="Nh·∫≠p email c·ªßa b·∫°n")
            password = st.text_input("M·∫≠t kh·∫©u", type="password", placeholder="Nh·∫≠p m·∫≠t kh·∫©u")
            
            submit_button = st.form_submit_button("ƒêƒÉng nh·∫≠p")
            
            if submit_button:
                if not email or not password:
                    st.error("Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!")
                else:
                    # X√°c th·ª±c ng∆∞·ªùi d√πng v·ªõi Supabase
                    user_info = get_user(email, password)
                    
                    if user_info:
                        st.session_state.user_role = user_info.get("role", "student")
                        st.session_state.user_info = {
                            "email": user_info.get("email", email),
                            "full_name": user_info.get("full_name", "H·ªçc vi√™n"),
                            "class_name": user_info.get("class", "L·ªõp ƒë√†o t·∫°o")
                        }
                        st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                        st.rerun()
                    else:
                        st.error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
    
    # Tab ƒëƒÉng k√Ω
    with tab2:
        with st.form("registration_form"):
            st.subheader("ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi")
            reg_email = st.text_input("Email", placeholder="Nh·∫≠p email c·ªßa b·∫°n", key="reg_email")
            reg_password = st.text_input("M·∫≠t kh·∫©u", type="password", placeholder="Nh·∫≠p m·∫≠t kh·∫©u", key="reg_password")
            confirm_password = st.text_input("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u", type="password", placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u")
            full_name = st.text_input("H·ªç v√† t√™n", placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß")
            class_name = st.text_input("L·ªõp", placeholder="Nh·∫≠p t√™n l·ªõp/kh√≥a h·ªçc")
            
            register_button = st.form_submit_button("ƒêƒÉng k√Ω")
            
            if register_button:
                # Ki·ªÉm tra c√°c tr∆∞·ªùng th√¥ng tin
                if not reg_email or not reg_password or not confirm_password or not full_name:
                    st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.")
                elif reg_password != confirm_password:
                    st.error("M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp.")
                else:
                    # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
                    email_exists, message = check_email_exists(reg_email)
                    
                    if email_exists:
                        st.error("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn email kh√°c.")
                    else:
                        # ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
                        success, message = register_user(reg_email, reg_password, full_name, class_name, "student")
                        if success:
                            st.success(message)
                            st.info("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.")
                        else:
                            st.error(message)

def main():
    st.set_page_config(
        page_title="H·ªá th·ªëng ki·ªÉm tra sau ƒë√†o t·∫°o ƒê√°nh gi√° vi√™n N·ªôi b·ªô ISO 50001:2018",
        page_icon="üìù",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Hi·ªÉn th·ªã logo tr∆∞·ªõc khi b·∫•t k·ª≥ n·ªôi dung n√†o kh√°c
    display_logos()
    
    # Ki·ªÉm tra c·∫•u h√¨nh Supabase
    is_valid, message = check_supabase_config()
    
    # N·∫øu ch∆∞a thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
    if not is_valid:
        st.error(message)
        setup_environment_variables()
        return  # D·ª´ng ·ª©ng d·ª•ng cho ƒë·∫øn khi thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
    
    # Thi·∫øt l·∫≠p Supabase client
    supabase = get_supabase_client()
    if not supabase:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Supabase. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
        setup_environment_variables()
        return
    
    # Sidebar - Menu ƒëi·ªÅu h∆∞·ªõng
    with st.sidebar:
        st.title("üìù H·ªá th·ªëng ki·ªÉm tra sau ƒë√†o t·∫°o ƒê√°nh gi√° vi√™n N·ªôi b·ªô ISO 50001:2018")
        st.success("ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Supabase!")
        
        # Hi·ªÉn th·ªã th√¥ng tin d·ª± √°n (·∫©n key)
        with st.expander("Th√¥ng tin k·∫øt n·ªëi"):
            st.write(f"**URL:** {os.environ.get('SUPABASE_URL')}")
            api_key = os.environ.get('SUPABASE_KEY', '')
            masked_key = f"{api_key[:6]}...{api_key[-4:]}" if len(api_key) > 10 else "Ch∆∞a thi·∫øt l·∫≠p"
            st.write(f"**API Key:** {masked_key}")
        
        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if "user_role" not in st.session_state:
            st.session_state.user_role = None
            
        if "user_info" not in st.session_state:
            st.session_state.user_info = None
        
        # N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        if not st.session_state.user_role:
            # S·ª≠ d·ª•ng form ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω
            login_register_form()
        
        # ƒê√£ ƒëƒÉng nh·∫≠p - Hi·ªÉn th·ªã menu t∆∞∆°ng ·ª©ng
        else:
            st.write(f"Ch√†o m·ª´ng b·∫°n tham d·ª± b√†i ki·ªÉm sau ƒê√°nh gi√° vi√™n n·ªôi b·ªô ISO 50001:2018, **{st.session_state.user_info['full_name']}**!")
            
            # Menu cho qu·∫£n tr·ªã vi√™n
            if st.session_state.user_role == "admin":
                page = st.radio(
                    "Ch·ªçn ch·ª©c nƒÉng:",
                    ["Qu·∫£n l√Ω c√¢u h·ªèi", "B√°o c√°o & th·ªëng k√™", "Qu·∫£n tr·ªã h·ªá th·ªëng"]
                )
                        
            # Menu cho h·ªçc vi√™n
            else:
                page = st.radio(
                    "Ch·ªçn ch·ª©c nƒÉng:",
                    ["L√†m b√†i kh·∫£o s√°t"]
                )
            
            # N√∫t ƒëƒÉng xu·∫•t
            if st.button("ƒêƒÉng xu·∫•t"):
                st.session_state.user_role = None
                st.session_state.user_info = None
                st.rerun()
    
    # Hi·ªÉn th·ªã n·ªôi dung t∆∞∆°ng ·ª©ng
    if "user_role" in st.session_state and st.session_state.user_role:
        if st.session_state.user_role == "admin":
            if page == "Qu·∫£n l√Ω c√¢u h·ªèi":
                manage_questions()
            elif page == "B√°o c√°o & th·ªëng k√™":
                stats_dashboard()
            elif page == "Qu·∫£n tr·ªã h·ªá th·ªëng":
                report.view_statistics()
        else:
            if page == "L√†m b√†i kh·∫£o s√°t":
                survey_form(
                    st.session_state.user_info["email"], 
                    st.session_state.user_info["full_name"], 
                    st.session_state.user_info["class_name"]
                )
    else:
        # M√†n h√¨nh ch√†o m·ª´ng
        st.header("Ch√†o m·ª´ng c√°c b·∫°n h·ªçc vi√™n c·ªßa kh√≥a ƒê√†o t·∫°o ƒê√°nh gi√° vi√™n n·ªôi b·ªô ISO 50001:2018 - TUV NORD!")
        
        st.markdown("""
        ### T√≠nh nƒÉng ch√≠nh:
        
        **D√†nh cho h·ªçc vi√™n:**
        - L√†m b√†i kh·∫£o s√°t v·ªõi nhi·ªÅu lo·∫°i c√¢u h·ªèi
        - Xem l·ªãch s·ª≠ l√†m b√†i v√† k·∫øt qu·∫£
        - Theo d√µi ti·∫øn ƒë·ªô c·∫£i thi·ªán
        
        **D√†nh cho qu·∫£n tr·ªã vi√™n:**
        - Qu·∫£n l√Ω c√¢u h·ªèi: Th√™m, s·ª≠a, x√≥a c√¢u h·ªèi
        - B√°o c√°o & th·ªëng k√™: Ph√¢n t√≠ch k·∫øt qu·∫£, xem b√°o c√°o chi ti·∫øt
        - Qu·∫£n tr·ªã h·ªá th·ªëng: Qu·∫£n l√Ω h·ªçc vi√™n, xu·∫•t d·ªØ li·ªáu
        
        Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω ·ªü thanh b√™n tr√°i ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng.
        """)
        
        # Hi·ªÉn th·ªã m·ªôt s·ªë th√¥ng tin demo
        with st.expander("Th√¥ng tin App: Ki·ªÉm tra ƒê√°nh gi√° vi√™n n·ªôi b·ªô ISO 50001:2018"):
            st.write("""
            **ƒê√¢y l√† phi√™n b·∫£n App Ver 1.0 Team ISO 50001**
            
            - N·∫øu b·∫°n ƒë√£ c√≥ t√†i kho·∫£n, vui l√≤ng ƒëƒÉng nh·∫≠p.
            - N·∫øu ch∆∞a c√≥ t√†i kho·∫£n, vui l√≤ng ƒëƒÉng k√Ω ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng.
            
            H·ªá th·ªëng n√†y s·ª≠ d·ª•ng Supabase l√†m c∆° s·ªü d·ªØ li·ªáu.
            """)

def setup_environment_variables():
    """Form thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng"""
    st.header("Thi·∫øt l·∫≠p k·∫øt n·ªëi Supabase")
    
    # Tabs cho c√°c ph∆∞∆°ng ph√°p thi·∫øt l·∫≠p kh√°c nhau
    tab1, tab2 = st.tabs(["Thi·∫øt l·∫≠p tr·ª±c ti·∫øp", "H∆∞·ªõng d·∫´n"])
    
    with tab1:
        st.subheader("Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng")
        st.warning("Ch√∫ √Ω: Ph∆∞∆°ng ph√°p n√†y ch·ªâ l∆∞u bi·∫øn m√¥i tr∆∞·ªùng trong phi√™n hi·ªán t·∫°i. Khi kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng, b·∫°n s·∫Ω c·∫ßn thi·∫øt l·∫≠p l·∫°i.")
        
        with st.form("env_setup_form"):
            current_url = os.environ.get("SUPABASE_URL", "")
            current_key = os.environ.get("SUPABASE_KEY", "")
            
            supabase_url = st.text_input("URL (Project URL)", value=current_url, placeholder="https://your-project-id.supabase.co")
            supabase_key = st.text_input("API Key (anon/public)", value=current_key, type="password", placeholder="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...")
            
            st.info("B·∫°n c√≥ th·ªÉ t√¨m th·∫•y URL v√† API Key trong dashboard c·ªßa Supabase: C√†i ƒë·∫∑t > API")
            
            submit = st.form_submit_button("L∆∞u c·∫•u h√¨nh")
            
            if submit:
                if not supabase_url or not supabase_key:
                    st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß URL v√† API Key.")
                elif not supabase_url.startswith("https://"):
                    st.error("URL kh√¥ng h·ª£p l·ªá. URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng https://")
                else:
                    os.environ["SUPABASE_URL"] = supabase_url
                    os.environ["SUPABASE_KEY"] = supabase_key
                    st.success("ƒê√£ thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng th√†nh c√¥ng!")
                    st.button("Ti·∫øp t·ª•c", on_click=lambda: st.rerun())
    
    with tab2:
        st.subheader("H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p")
        
        st.markdown("""
        ### Thi·∫øt l·∫≠p theo s·ª± h∆∞·ªõng d·∫´n      
        
        """)
        
        st.info("Sau khi thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng b·∫±ng m·ªôt trong c√°c ph∆∞∆°ng ph√°p tr√™n, h√£y kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.")

if __name__ == "__main__":
    main()
